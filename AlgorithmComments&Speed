import time  # Import the time module to measure elapsed time
import math  # Import the math module to use math functions such as math.fmod()
import random  # Import the random module to generate random numbers

def diengs_algorithm(password: str, num_buckets: int) -> int:
    """
    Hashes a password using Dieng's Algorithm.
    
    The algorithm converts the password to an integer using the ord() function,
    multiplies the integer by a random number in the range [1, 10], and then
    calculates the hash value using the remainder of the integer divided by 1/3.
    It then uses a math theorem to further obscure the hash value, and scales
    the result to the desired range.
    
    Parameters:
    - password: the password to be hashed (string)
    - num_buckets: the number of buckets to scale the hash value to (integer)
    
    Returns:
    - the hash value of the password (integer)
    """
    
    # Convert the password to a integer using the ord() function
    password_int = 0
    for ch in password:
        password_int += ord(ch)
    
    # Multiply the password integer by a random integer in the range [1, 10]
    random_int = random.randint(1, 10)
    password_int *= random_int
    
    # Calculate the hash value using the remainder of the password integer divided by 1/3
    hash_val = math.fmod(password_int, 1/3)
    
    # Use the math theorem to further obscure the hash value
    hash_val = (hash_val + random_int) % num_buckets
    # Scale the hash value to the desired range
    hash_val *= num_buckets
    
    # Return the integer part of the hash value
    return int(hash_val)

# Test the hashing speed of Dieng's Algorithm
num_hashes = 10000  # Number of hashes to perform in the test

# Record the start time
start_time = time.time()

# Perform the hashes
for i in range(num_hashes):
    diengs_algorithm("password123", 1000)

# Record the end time
end_time = time.time()

# Calculate the hash rate by dividing the number of hashes by the elapsed time
hash_rate = num_hashes / (end_time - start_time)

# Print the hash rate
print(f"Dieng's Algorithm hashing rate: {hash_rate:.2f} hashes/sec")

# Test the computational overhead of Dieng's Algorithm

# Record the start time
start_time = time.time()

# Perform the operations
for i in range(num_hashes):
    math.fmod(12345, 1/3)

# Record the end time
end_time = time.time()

# Calculate the overhead rate by dividing the number of operations by the elapsed time
overhead_rate = num_hashes / (end_time - start_time)

# Print the overhead rate
print(f"Computational overhead of Dieng's Algorithm: {overhead_rate:.2f} ops/sec")
